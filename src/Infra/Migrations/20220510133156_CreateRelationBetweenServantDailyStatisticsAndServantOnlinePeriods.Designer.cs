// <auto-generated />
using System;
using Infra.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(TransportationContext))]
    [Migration("20220510133156_CreateRelationBetweenServantDailyStatisticsAndServantOnlinePeriods")]
    partial class CreateRelationBetweenServantDailyStatisticsAndServantOnlinePeriods
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Infra.Entities.Account", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<long?>("Balance")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("number");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("role_id");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "accounts_role_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "accounts_service_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "accounts_user_id_foreign");

                    b.ToTable("accounts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Action", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("format");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("actions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ActionUsage", b =>
                {
                    b.Property<ulong>("ActionId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("action_id");

                    b.Property<ulong>("UsageId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("usage_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("value");

                    b.HasKey("ActionId", "UsageId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ActionId" }, "action_usage_action_id_foreign");

                    b.HasIndex(new[] { "UsageId" }, "action_usage_usage_id_foreign");

                    b.ToTable("action_usage", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ActiveRole", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasIndex(new[] { "RoleId" }, "active_role_role_id_index");

                    b.HasIndex(new[] { "UserId" }, "active_role_user_id_index");

                    b.ToTable("active_role", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ActivityLog", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("ActionBy")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("action_by");

                    b.Property<ulong>("ActionToId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("action_to_id");

                    b.Property<string>("ActionToType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("action_to_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActionBy" }, "activity_logs_action_by_foreign");

                    b.HasIndex(new[] { "ActionToType", "ActionToId" }, "activity_logs_action_to_type_action_to_id_index");

                    b.ToTable("activity_logs", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.AreaDepartment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<uint?>("DepartmentId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("department_id");

                    b.Property<ulong?>("RoleUserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("role_user_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "area_department_area_id_foreign");

                    b.HasIndex(new[] { "DepartmentId" }, "area_department_department_id_foreign");

                    b.HasIndex(new[] { "RoleUserId" }, "area_department_role_user_id_index");

                    b.ToTable("area_department", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.AreaInfo", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("area_id");

                    b.Property<string>("Bound")
                        .HasColumnType("json")
                        .HasColumnName("bound");

                    b.Property<string>("Center")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("center");

                    b.Property<string>("Country")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("currency");

                    b.Property<string>("Timezone")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("timezone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "area_info_area_id_unique")
                        .IsUnique();

                    b.ToTable("area_info", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Attribute", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("attributes", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.AttributeServiceAreaType", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AttributeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("attribute_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AttributeId" }, "attribute_service_area_types_attribute_id_foreign");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "attribute_service_area_types_service_area_type_id_foreign");

                    b.ToTable("attribute_service_area_types", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.BaseType", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("base_types", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.BaseTypeTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("BaseTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("base_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BaseTypeId", "LanguageId" }, "base_type_translations_base_type_id_language_id_index");

                    b.HasIndex(new[] { "LanguageId" }, "base_type_translations_language_id_foreign");

                    b.ToTable("base_type_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.CanceledTask", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("CancelReasonId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("cancel_reason_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<double>("Lat")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasColumnType("double")
                        .HasColumnName("lng");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("role_id");

                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("task_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CancelReasonId" }, "canceled_tasks_cancel_reason_id_foreign");

                    b.HasIndex(new[] { "RoleId" }, "canceled_tasks_role_id_foreign");

                    b.HasIndex(new[] { "TaskId" }, "canceled_tasks_task_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "canceled_tasks_user_id_foreign");

                    b.ToTable("canceled_tasks", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.CancelReason", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("cancel_reasons", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.CancelReasonTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("CancelReasonId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("cancel_reason_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CancelReasonId" }, "cancel_reason_translations_cancel_reason_id_foreign");

                    b.ToTable("cancel_reason_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Category", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.CategoryTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("CategoryId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId", "LanguageId" }, "category_translations_category_id_language_id_index");

                    b.HasIndex(new[] { "LanguageId" }, "category_translations_language_id_foreign");

                    b.ToTable("category_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ClientFile", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("FileId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("file_id");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("platform");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Version")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "client_files_file_id_foreign");

                    b.HasIndex(new[] { "LanguageId" }, "client_files_language_id_foreign");

                    b.ToTable("client_files", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Commission", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsWithdrawFromGift")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_withdraw_from_gift");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<double>("Value")
                        .HasColumnType("double(5,5)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "commissions_service_area_type_id_foreign");

                    b.ToTable("commissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.DailyStatistic", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<uint>("CanceledTasks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("canceled_tasks")
                        .HasDefaultValueSql("'0'");

                    b.Property<ulong>("DayId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("day_id");

                    b.Property<double>("DistanceOnTask")
                        .HasColumnType("double(8,2) unsigned")
                        .HasColumnName("distance_on_task")
                        .HasComment("km base");

                    b.Property<double>("DurationOnTask")
                        .HasColumnType("double(8,2) unsigned")
                        .HasColumnName("duration_on_task")
                        .HasComment("hour base");

                    b.Property<uint>("NoAcceptRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("no_accept_requests")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("NoServantRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("no_servant_requests")
                        .HasDefaultValueSql("'0'");

                    b.Property<double>("OnlineHours")
                        .HasColumnType("double(8,2) unsigned")
                        .HasColumnName("online_hours")
                        .HasComment("hour base");

                    b.Property<uint>("OnlineServants")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("online_servants");

                    b.Property<uint>("Requests")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("requests");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<uint>("SuccessTasks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("success_tasks")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "daily_statistics_area_id_foreign");

                    b.HasIndex(new[] { "DayId" }, "daily_statistics_day_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "daily_statistics_service_id_foreign");

                    b.ToTable("daily_statistics", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.DeadLine", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<TimeOnly>("GoingTime")
                        .HasColumnType("time")
                        .HasColumnName("going_time");

                    b.Property<ulong>("RequestId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("request_id");

                    b.Property<TimeOnly>("ReturnTime")
                        .HasColumnType("time")
                        .HasColumnName("return_time");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RequestId" }, "dead_lines_request_id_foreign");

                    b.ToTable("dead_lines", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.DefaultValue", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("values");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "default_values_language_id_index");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "default_values_model_type_model_id_index");

                    b.ToTable("default_values", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Department", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("departments", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.DepartmentRoleUser", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<uint>("DepartmentId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("department_id");

                    b.Property<ulong>("RoleUserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("role_user_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentId" }, "department_role_user_department_id_foreign");

                    b.HasIndex(new[] { "RoleUserId" }, "department_role_user_role_user_id_foreign");

                    b.ToTable("department_role_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Destination", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<int>("Distance")
                        .HasColumnType("int(11)")
                        .HasColumnName("distance");

                    b.Property<int>("Duration")
                        .HasColumnType("int(11)")
                        .HasColumnName("duration");

                    b.Property<double>("Lat")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasColumnType("double")
                        .HasColumnName("lng");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<int>("Price")
                        .HasColumnType("int(11)")
                        .HasColumnName("price");

                    b.Property<sbyte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("Step")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("step");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "destinations_model_type_model_id_index");

                    b.ToTable("destinations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Device", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("device_id");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("platform");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "devices_user_id_foreign");

                    b.ToTable("devices", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.DeviceTask", b =>
                {
                    b.Property<byte>("ActiveFromStatus")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("active_from_status");

                    b.Property<ulong>("DeviceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("device_id");

                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("task_id");

                    b.HasIndex(new[] { "DeviceId" }, "device_task_device_id_foreign");

                    b.HasIndex(new[] { "TaskId" }, "device_task_task_id_foreign");

                    b.ToTable("device_task", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Discount", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<byte?>("Limit")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("limit");

                    b.Property<ushort>("Max")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("max");

                    b.Property<string>("Periods")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("periods");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<double>("Value")
                        .HasColumnType("double(5,5)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "discounts_service_area_type_id_foreign");

                    b.ToTable("discounts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.DiscountCode", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("detail");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_at");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime")
                        .HasColumnName("start_at");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('Percent','Value')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ushort?>("UsageLimit")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("usage_limit");

                    b.Property<double>("Value")
                        .HasColumnType("double(8,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "discount_codes_area_id_foreign");

                    b.HasIndex(new[] { "Code" }, "discount_codes_code_unique")
                        .IsUnique();

                    b.ToTable("discount_codes", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.DiscountCodeServiceAreaType", b =>
                {
                    b.Property<ulong>("DiscountCodeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("discount_code_id");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.HasIndex(new[] { "DiscountCodeId" }, "discount_code_service_area_type_discount_code_id_foreign");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "discount_code_service_area_type_service_area_type_id_foreign");

                    b.ToTable("discount_code_service_area_type", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.DiscountCodeUser", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ushort>("Amount")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("DiscountCodeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("discount_code_id");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("used");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DiscountCodeId" }, "discount_code_user_discount_code_id_foreign");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "discount_code_user_model_type_model_id_index");

                    b.HasIndex(new[] { "UserId" }, "discount_code_user_user_id_foreign");

                    b.ToTable("discount_code_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Document", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_verified");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "documents_model_type_model_id_index");

                    b.ToTable("documents", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Employee", b =>
                {
                    b.Property<ulong?>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("first_name");

                    b.Property<uint?>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .IsUnique();

                    b.ToTable("employees", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.FailedJob", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("exception");

                    b.Property<DateTime>("FailedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("failed_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("payload");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("queue");

                    b.HasKey("Id");

                    b.ToTable("failed_jobs", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Favorite", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Lat")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasColumnType("double")
                        .HasColumnName("lng");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "favorites_user_id_foreign");

                    b.ToTable("favorites", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Field", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("LabelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("label_id");

                    b.Property<ulong>("SegmentId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("segment_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LabelId" }, "fields_label_id_foreign");

                    b.HasIndex(new[] { "SegmentId" }, "fields_segment_id_foreign");

                    b.ToTable("fields", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.File", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("path");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("files", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.FileModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("FileId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("file_id");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "file_models_file_id_foreign");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "file_models_model_type_model_id_index");

                    b.ToTable("file_models", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.FrequentlyField", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("frequently_fields", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Gender", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Key")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("key");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("genders", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.GenderTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<byte>("GenderId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("gender_id");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GenderId", "LanguageId" }, "gender_translations_gender_id_language_id_index");

                    b.HasIndex(new[] { "LanguageId" }, "gender_translations_language_id_foreign");

                    b.ToTable("gender_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Gift", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Balance")
                        .HasColumnType("int(11)")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_at");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("role_id");

                    b.Property<ulong>("TransferredToPayment")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("transferred_to_payment");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'Expendable'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "gifts_role_id_foreign");

                    b.HasIndex(new[] { "UserId", "RoleId", "Type", "Currency" }, "gifts_user_id_role_id_type_currency_unique")
                        .IsUnique();

                    b.ToTable("gifts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Group", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("groups", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.GroupUser", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("GroupId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "group_user_group_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "group_user_user_id_foreign");

                    b.ToTable("group_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.KubakAccount", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("account_number");

                    b.Property<ulong?>("CityId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("city_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('COMMISSION','BUDGET')")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("kubak_accounts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Label", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<string>("StaticKey")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("static_key");

                    b.Property<ulong?>("UnitId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UnitId" }, "label_index");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "labels_model_type_model_id_index");

                    b.ToTable("labels", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Language", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("direction");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("locale");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Locale" }, "languages_locale_unique")
                        .IsUnique();

                    b.ToTable("languages", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Location", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("ModifiedPoints")
                        .HasColumnType("json")
                        .HasColumnName("modified_points");

                    b.Property<string>("Points")
                        .HasColumnType("json")
                        .HasColumnName("points");

                    b.Property<ulong>("TraceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("trace_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TraceId" }, "locations_trace_id_foreign");

                    b.ToTable("locations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Log", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Headers")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("headers");

                    b.Property<string>("Inputs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inputs");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<short>("StatusCode")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("status_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("logs", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Member", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<double>("Lat")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasColumnType("double")
                        .HasColumnName("lng");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<int>("Price")
                        .HasColumnType("int(11)")
                        .HasColumnName("price");

                    b.Property<bool>("Requester")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("requester");

                    b.Property<sbyte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'")
                        .HasComment("1 => active, 0 => deactive");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "members_model_type_model_id_index");

                    b.HasIndex(new[] { "UserId" }, "members_user_id_foreign");

                    b.ToTable("members", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.MemberPaymentType", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("MemberId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("member_id");

                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("task_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MemberId" }, "member_payment_type_member_id_foreign");

                    b.HasIndex(new[] { "TaskId" }, "member_payment_type_task_id_foreign");

                    b.ToTable("member_payment_type", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Migration", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Batch")
                        .HasColumnType("int(11)")
                        .HasColumnName("batch");

                    b.Property<string>("Migration1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("migration");

                    b.HasKey("Id");

                    b.ToTable("migrations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ModelHasPermission", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<uint>("PermissionId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("permission_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "model_has_permission_model_type_model_id_index");

                    b.ToTable("model_has_permission", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.NoServantRequest", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<double>("Lat")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasColumnType("double")
                        .HasColumnName("lng");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "no_servant_requests_service_area_type_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "no_servant_requests_user_id_foreign");

                    b.ToTable("no_servant_requests", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Offer", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("condition");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<ulong?>("GroupId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("role_id");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("target");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "offers_area_id_foreign");

                    b.HasIndex(new[] { "RoleId" }, "offers_role_id_foreign");

                    b.ToTable("offers", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.OfferServiceAreaType", b =>
                {
                    b.Property<ulong>("OfferId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("offer_id");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.HasIndex(new[] { "OfferId" }, "offer_service_area_type_offer_id_foreign");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "offer_service_area_type_service_area_type_id_foreign");

                    b.ToTable("offer_service_area_type", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.OfferTemplateCondition", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Inputs")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("inputs");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("offer_template_conditions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.OfferTemplatePayType", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Inputs")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("inputs");

                    b.Property<string>("PayOn")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("pay_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("offer_template_pay_types", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.OfferUser", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("OfferId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("offer_id");

                    b.Property<float>("Progress")
                        .HasColumnType("float unsigned")
                        .HasColumnName("progress");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'InProgress'");

                    b.Property<ushort>("TasksDone")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("tasks_done");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.ToTable("offer_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Option", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("options", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.OptionServiceAreaType", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("OptionId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("option_id");

                    b.Property<int>("Price")
                        .HasColumnType("int(11)")
                        .HasColumnName("price");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "option_service_area_type_service_area_type_id_foreign");

                    b.HasIndex(new[] { "OptionId", "ServiceAreaTypeId" }, "option_service_index");

                    b.ToTable("option_service_area_type", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.OptionSubscriber", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<ulong>("OptionId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("option_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "option_subscriber_model_type_model_id_index");

                    b.HasIndex(new[] { "OptionId" }, "option_subscriber_option_id_foreign");

                    b.ToTable("option_subscriber", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.PasswordReset", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.HasIndex(new[] { "Email" }, "password_resets_email_index");

                    b.ToTable("password_resets", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Permission", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong?>("Dependency")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("dependency")
                        .HasComment("permission_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.PersonType", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("person_types", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.PersonTypeTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<ulong>("PersonTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("person_type_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "person_type_translations_language_id_foreign");

                    b.HasIndex(new[] { "PersonTypeId", "LanguageId" }, "person_type_translations_person_type_id_language_id_index");

                    b.ToTable("person_type_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Referral", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("InvitedId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("invited_id");

                    b.Property<ulong>("InvitedRoleId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("invited_role_id");

                    b.Property<ulong>("InviterId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("inviter_id");

                    b.Property<byte>("InviterRoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("inviter_role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("referrals", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Request", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Discount")
                        .HasColumnType("json")
                        .HasColumnName("discount");

                    b.Property<int>("KubakPrice")
                        .HasColumnType("int(11)")
                        .HasColumnName("kubak_price");

                    b.Property<DateTime?>("ReserveTime")
                        .HasColumnType("datetime")
                        .HasColumnName("reserve_time");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<sbyte>("Status")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserPrice")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_price");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "requests_service_area_type_id_foreign");

                    b.ToTable("requests", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.RequestOptionService", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("OptionId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("option_id");

                    b.Property<int>("Price")
                        .HasColumnType("int(11)")
                        .HasColumnName("price");

                    b.Property<ulong>("RequestId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("request_id");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RequestId", "OptionId", "ServiceId" }, "request_option_service_index");

                    b.HasIndex(new[] { "OptionId" }, "request_option_service_option_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "request_option_service_service_id_foreign");

                    b.ToTable("request_option_service", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.RequestRequirement", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("FieldId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("field_id");

                    b.Property<ulong>("RequestId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("request_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FieldId" }, "request_requirements_field_id_foreign");

                    b.HasIndex(new[] { "RequestId" }, "request_requirements_request_id_foreign");

                    b.ToTable("request_requirements", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.RequestServant", b =>
                {
                    b.Property<ulong>("RequestId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("request_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Online")
                        .HasColumnType("json")
                        .HasColumnName("online");

                    b.Property<string>("Passive")
                        .HasColumnType("json")
                        .HasColumnName("passive");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("RequestId")
                        .HasName("PRIMARY");

                    b.ToTable("request_servants", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Requirement", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<string>("ShowIn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("show_in");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceAreaTypeId" }, "requirements_service_area_type_id_foreign");

                    b.ToTable("requirements", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Role", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<sbyte>("Type")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("type")
                        .HasComment("[1 => [Admin , SuperAdmin], 2 => [ Client , Servant , Organization ]]");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.RoleUser", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "role_user_role_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "role_user_user_id_foreign");

                    b.ToTable("role_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Rounder", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("currency");

                    b.Property<double>("Divisor")
                        .HasColumnType("double(8,2)")
                        .HasColumnName("divisor");

                    b.Property<string>("Method")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('half','toUp','toDown')")
                        .HasColumnName("method")
                        .HasDefaultValueSql("'half'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Currency" }, "rounder_currency_index");

                    b.ToTable("rounder", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Score", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<double>("Rate")
                        .HasColumnType("double(2,1) unsigned")
                        .HasColumnName("rate");

                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("task_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TaskId" }, "scores_task_id_foreign");

                    b.ToTable("scores", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Segment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<uint>("RequirementId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("requirement_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "segments_language_id_foreign");

                    b.HasIndex(new[] { "RequirementId" }, "segments_requirement_id_foreign");

                    b.ToTable("segments", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Servant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<uint>("AreaId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("area_id");

                    b.Property<string>("BankId")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("bank_id");

                    b.Property<string>("Certificate")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("certificate");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("first_name");

                    b.Property<byte?>("GenderId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("gender_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("last_name");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("national_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GenderId" }, "servants_gender_id_foreign");

                    b.HasIndex(new[] { "NationalId" }, "servants_national_id_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "servants_user_id_unique")
                        .IsUnique();

                    b.ToTable("servants", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServantDailyOnlinePeriod", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime")
                        .HasColumnName("end_at");

                    b.Property<ulong>("ServantDailyStatisticId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("servant_daily_statistic_id");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime")
                        .HasColumnName("start_at");

                    b.HasKey("Id");

                    b.HasIndex("ServantDailyStatisticId");

                    b.ToTable("servant_daily_online_periods", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServantDailyStatistic", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("DayId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("day_id");

                    b.Property<ushort>("DeliveredRequest")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("delivered_request");

                    b.Property<uint>("DistanceOnTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("distance_on_task")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DurationOnTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("duration_on_task")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("OnlineDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("online_duration")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("RejectedRequest")
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("rejected_request");

                    b.Property<byte>("RejectedTask")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("rejected_task");

                    b.Property<ulong>("ServantId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("servant_id");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<byte>("SuccessTask")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("success_task");

                    b.Property<uint>("TasksAmount")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("tasks_amount");

                    b.Property<uint>("TasksCommission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("tasks_commission")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DayId", "ServantId", "ServiceId" }, "servant_daily_statistics_day_id_servant_id_service_id_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "ServantId" }, "servant_daily_statistics_servant_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "servant_daily_statistics_service_id_foreign");

                    b.ToTable("servant_daily_statistics", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServantHourlyStatistic", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("DayId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("day_id");

                    b.Property<byte>("Hour")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hour");

                    b.Property<uint>("OnlineServants")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("online_servants");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("servant_hourly_statistics", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServantScore", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("Number")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("number");

                    b.Property<double>("Score")
                        .HasColumnType("double(2,1) unsigned")
                        .HasColumnName("score");

                    b.Property<ulong>("ServantId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("servant_id");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServantId" }, "servant_scores_servant_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "servant_scores_service_id_foreign");

                    b.ToTable("servant_scores", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServantStatus", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<double>("Lat")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Lng")
                        .HasColumnType("double")
                        .HasColumnName("lng");

                    b.Property<ulong>("ServantId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("servant_id");

                    b.Property<ulong?>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('offline','passive','block','online')")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'SYSTEM'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServantId" }, "servant_id");

                    b.HasIndex(new[] { "AreaId" }, "servant_status_area_id_index");

                    b.HasIndex(new[] { "ServiceId" }, "service_id");

                    b.ToTable("servant_status", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServantWorkDay", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("servant_work_days", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Service", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("pin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("services", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServiceAreaType", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("area_id");

                    b.Property<ulong>("CategoryId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Params")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("params");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<ulong?>("TypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong?>("UsageId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("usage_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "service_area_type_area_id_index");

                    b.HasIndex(new[] { "CategoryId" }, "service_area_type_category_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "service_area_type_service_id_foreign");

                    b.HasIndex(new[] { "TypeId" }, "service_area_type_type_id_foreign");

                    b.HasIndex(new[] { "UsageId" }, "service_area_type_usage_id_foreign");

                    b.ToTable("service_area_type", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServiceAreaTypeTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceAreaTypeId", "LanguageId" }, "service_area_type_translations_index");

                    b.HasIndex(new[] { "LanguageId" }, "service_area_type_translations_language_id_foreign");

                    b.ToTable("service_area_type_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServiceSubscriber", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<bool?>("IsSubscribed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_subscribed")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<ulong>("ServiceAreaTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_area_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("WorkTime")
                        .HasColumnType("json")
                        .HasColumnName("work_time");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "service_subscribers_model_type_model_id_index");

                    b.ToTable("service_subscribers", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ServiceTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ServiceId" }, "language_id");

                    b.HasIndex(new[] { "LanguageId" }, "service_translations_language_id_foreign");

                    b.ToTable("service_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Shipping", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("shippings", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.ShippingTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<ulong>("ShippingId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("shipping_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "shipping_translations_language_id_foreign");

                    b.HasIndex(new[] { "ShippingId", "LanguageId" }, "shipping_translations_shipping_id_language_id_index");

                    b.ToTable("shipping_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.SpecificTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("description");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "specific_translations_index");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "specific_translations_model_type_model_id_index");

                    b.ToTable("specific_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.SupportNumber", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "support_numbers_area_id_foreign");

                    b.ToTable("support_numbers", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Task", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<int>("Price")
                        .HasColumnType("int(11)")
                        .HasColumnName("price");

                    b.Property<ulong>("RequestId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("request_id");

                    b.Property<ulong>("ServantId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("servant_id");

                    b.Property<sbyte>("Status")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("status");

                    b.Property<int>("Tip")
                        .HasColumnType("int(11)")
                        .HasColumnName("tip");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RequestId" }, "tasks_request_id_foreign");

                    b.HasIndex(new[] { "ServantId" }, "tasks_servant_id_foreign");

                    b.ToTable("tasks", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.TaskFactor", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("task_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TaskId" }, "task_factors_task_id_foreign");

                    b.ToTable("task_factors", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.TaskHourlyStatistic", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<uint>("CanceledTasks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("canceled_tasks")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("DayId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("day_id");

                    b.Property<byte>("Hour")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hour");

                    b.Property<uint>("NoAcceptRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("no_accept_requests")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("NoServantRequests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("no_servant_requests")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Requests")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("requests")
                        .HasDefaultValueSql("'0'");

                    b.Property<ulong>("ServiceId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("service_id");

                    b.Property<uint>("SuccessTasks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("success_tasks")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "task_hourly_statistics_area_id_foreign");

                    b.HasIndex(new[] { "DayId" }, "task_hourly_statistics_day_id_foreign");

                    b.HasIndex(new[] { "ServiceId" }, "task_hourly_statistics_service_id_foreign");

                    b.ToTable("task_hourly_statistics", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.TaskMessage", b =>
                {
                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("task_id");

                    b.Property<string>("ChatId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("chat_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("TaskId")
                        .HasName("PRIMARY");

                    b.ToTable("task_messages", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.TaxiMeter", b =>
                {
                    b.Property<uint>("Amount")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("amount");

                    b.Property<uint>("Distance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("distance")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("duration")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("LastPoint")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("last_point");

                    b.Property<string>("Point1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("point1");

                    b.Property<string>("Point2")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("point2");

                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("task_id");

                    b.Property<ulong>("Time1")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("time1");

                    b.Property<ulong>("Time2")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("time2");

                    b.HasIndex(new[] { "TaskId" }, "task_id");

                    b.ToTable("taxi_meter", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.TelescopeEntriesTag", b =>
                {
                    b.Property<Guid>("EntryUuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("entry_uuid");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tag");

                    b.HasIndex(new[] { "EntryUuid", "Tag" }, "telescope_entries_tags_entry_uuid_tag_index");

                    b.HasIndex(new[] { "Tag" }, "telescope_entries_tags_tag_index");

                    b.ToTable("telescope_entries_tags", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.TelescopeEntry", b =>
                {
                    b.Property<ulong>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("sequence");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("char(36)")
                        .HasColumnName("batch_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("FamilyHash")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("family_hash");

                    b.Property<bool?>("ShouldDisplayOnIndex")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("should_display_on_index")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.HasKey("Sequence")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BatchId" }, "telescope_entries_batch_id_index");

                    b.HasIndex(new[] { "CreatedAt" }, "telescope_entries_created_at_index");

                    b.HasIndex(new[] { "FamilyHash" }, "telescope_entries_family_hash_index");

                    b.HasIndex(new[] { "Type", "ShouldDisplayOnIndex" }, "telescope_entries_type_should_display_on_index_index");

                    b.HasIndex(new[] { "Uuid" }, "telescope_entries_uuid_unique")
                        .IsUnique();

                    b.ToTable("telescope_entries", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.TelescopeMonitoring", b =>
                {
                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tag");

                    b.ToTable("telescope_monitoring", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Trace", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("ActionPoint")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("action_point");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.Property<sbyte>("Status")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ModelType", "ModelId" }, "traces_model_type_model_id_index");

                    b.HasIndex(new[] { "Status", "ModelType", "ModelId", "CreatedAt" }, "traces_status_model_type_model_id_unique")
                        .IsUnique();

                    b.ToTable("traces", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Type", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("BaseTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("base_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<ulong?>("PersonTypeId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("person_type_id");

                    b.Property<ulong?>("ShippingId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("shipping_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("types", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Unit", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("units", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.UnitTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<ulong>("UnitId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "unit_translations_language_id_foreign");

                    b.HasIndex(new[] { "UnitId", "LanguageId" }, "unit_translations_unit_id_language_id_index");

                    b.ToTable("unit_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Usage", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("StaticKey")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("static_key");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("usages", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.UsageTranslation", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<uint>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UsageId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("usage_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "usage_translations_language_id_foreign");

                    b.HasIndex(new[] { "UsageId" }, "usage_translations_usage_id_foreign");

                    b.ToTable("usage_translations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong?>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<string>("AuthId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("auth_id");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<byte?>("GenderId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("gender_id");

                    b.Property<uint?>("LanguageId")
                        .HasColumnType("mediumint(8) unsigned")
                        .HasColumnName("language_id");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Mobile" }, "mobile")
                        .IsUnique();

                    b.HasIndex(new[] { "GenderId" }, "users_gender_id_foreign");

                    b.ToTable("users", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.UserArea", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AreaId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("area_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AreaId" }, "user_areas_area_id_foreign");

                    b.HasIndex(new[] { "RoleId" }, "user_areas_role_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "user_areas_user_id_foreign");

                    b.ToTable("user_areas", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.UserToken", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Environment")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("environment");

                    b.Property<DateTime>("ExpireAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("expire_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Shadow")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("shadow");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.HasIndex(new[] { "UserId" }, "user_tokens_user_id_index");

                    b.ToTable("user_tokens", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Vehicle", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong?>("UsageId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("usage_id");

                    b.HasKey("Id");

                    b.ToTable("vehicles", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.VehicleDetail", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly?>("InsuranceExpire")
                        .HasColumnType("date")
                        .HasColumnName("insurance_expire");

                    b.Property<string>("InsuranceNo")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("insurance_no");

                    b.Property<string>("Model")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("model");

                    b.Property<string>("Plaque")
                        .HasColumnType("json")
                        .HasColumnName("plaque");

                    b.Property<string>("Tip")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("tip");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("VehicleId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("vehicle_id");

                    b.Property<string>("Vin")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("vin");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "VehicleId" }, "vehicle_details_vehicle_id_foreign");

                    b.ToTable("vehicle_details", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.VehicleOwner", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.Property<ulong>("VehicleId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "VehicleId" }, "vehicle_owner_user_id_vehicle_id_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "VehicleId" }, "vehicle_owner_vehicle_id_foreign");

                    b.ToTable("vehicle_owner", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.VehicleUser", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("user_id");

                    b.Property<ulong>("VehicleId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "vehicle_user_user_id_foreign");

                    b.HasIndex(new[] { "VehicleId" }, "vehicle_user_vehicle_id_foreign");

                    b.ToTable("vehicle_user", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Infra.Entities.Account", b =>
                {
                    b.HasOne("Infra.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("accounts_role_id_foreign");

                    b.HasOne("Infra.Entities.Service", "Service")
                        .WithMany("Accounts")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("accounts_service_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("accounts_user_id_foreign");

                    b.Navigation("Role");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.ActionUsage", b =>
                {
                    b.HasOne("Infra.Entities.Action", "Action")
                        .WithMany("ActionUsages")
                        .HasForeignKey("ActionId")
                        .IsRequired()
                        .HasConstraintName("action_usage_action_id_foreign");

                    b.HasOne("Infra.Entities.Usage", "Usage")
                        .WithMany("ActionUsages")
                        .HasForeignKey("UsageId")
                        .IsRequired()
                        .HasConstraintName("action_usage_usage_id_foreign");

                    b.Navigation("Action");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("Infra.Entities.ActiveRole", b =>
                {
                    b.HasOne("Infra.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("active_role_role_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("active_role_user_id_foreign");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.AreaDepartment", b =>
                {
                    b.HasOne("Infra.Entities.AreaInfo", "Area")
                        .WithMany("AreaDepartments")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("area_department_area_id_foreign");

                    b.HasOne("Infra.Entities.Department", "Department")
                        .WithMany("AreaDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("area_department_department_id_foreign");

                    b.Navigation("Area");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Infra.Entities.AttributeServiceAreaType", b =>
                {
                    b.HasOne("Infra.Entities.Attribute", "Attribute")
                        .WithMany("AttributeServiceAreaTypes")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("attribute_service_area_types_attribute_id_foreign");

                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany("AttributeServiceAreaTypes")
                        .HasForeignKey("ServiceAreaTypeId")
                        .IsRequired()
                        .HasConstraintName("attribute_service_area_types_service_area_type_id_foreign");

                    b.Navigation("Attribute");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.BaseTypeTranslation", b =>
                {
                    b.HasOne("Infra.Entities.BaseType", "BaseType")
                        .WithMany("BaseTypeTranslations")
                        .HasForeignKey("BaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_type_translations_base_type_id_foreign");

                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("BaseTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_type_translations_language_id_foreign");

                    b.Navigation("BaseType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Infra.Entities.CanceledTask", b =>
                {
                    b.HasOne("Infra.Entities.CancelReason", "CancelReason")
                        .WithMany("CanceledTasks")
                        .HasForeignKey("CancelReasonId")
                        .HasConstraintName("canceled_tasks_cancel_reason_id_foreign");

                    b.HasOne("Infra.Entities.Role", "Role")
                        .WithMany("CanceledTasks")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("canceled_tasks_role_id_foreign");

                    b.HasOne("Infra.Entities.Task", "Task")
                        .WithMany("CanceledTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("canceled_tasks_task_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("CanceledTasks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("canceled_tasks_user_id_foreign");

                    b.Navigation("CancelReason");

                    b.Navigation("Role");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.CancelReasonTranslation", b =>
                {
                    b.HasOne("Infra.Entities.CancelReason", "CancelReason")
                        .WithMany("CancelReasonTranslations")
                        .HasForeignKey("CancelReasonId")
                        .IsRequired()
                        .HasConstraintName("cancel_reason_translations_cancel_reason_id_foreign");

                    b.Navigation("CancelReason");
                });

            modelBuilder.Entity("Infra.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("category_translations_category_id_foreign");

                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("category_translations_language_id_foreign");

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Infra.Entities.ClientFile", b =>
                {
                    b.HasOne("Infra.Entities.File", "File")
                        .WithMany("ClientFiles")
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("client_files_file_id_foreign");

                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("ClientFiles")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("client_files_language_id_foreign");

                    b.Navigation("File");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Infra.Entities.Commission", b =>
                {
                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany("Commissions")
                        .HasForeignKey("ServiceAreaTypeId")
                        .IsRequired()
                        .HasConstraintName("commissions_service_area_type_id_foreign");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.DailyStatistic", b =>
                {
                    b.HasOne("Infra.Entities.AreaInfo", "Area")
                        .WithMany("DailyStatistics")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("daily_statistics_area_id_foreign");

                    b.HasOne("Infra.Entities.ServantWorkDay", "Day")
                        .WithMany("DailyStatistics")
                        .HasForeignKey("DayId")
                        .IsRequired()
                        .HasConstraintName("daily_statistics_day_id_foreign");

                    b.HasOne("Infra.Entities.Service", "Service")
                        .WithMany("DailyStatistics")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("daily_statistics_service_id_foreign");

                    b.Navigation("Area");

                    b.Navigation("Day");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infra.Entities.DeadLine", b =>
                {
                    b.HasOne("Infra.Entities.Request", "Request")
                        .WithMany("DeadLines")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("dead_lines_request_id_foreign");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Infra.Entities.DefaultValue", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("DefaultValues")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("default_values_language_id_foreign");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Infra.Entities.DepartmentRoleUser", b =>
                {
                    b.HasOne("Infra.Entities.Department", "Department")
                        .WithMany("DepartmentRoleUsers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("department_role_user_department_id_foreign");

                    b.HasOne("Infra.Entities.RoleUser", "RoleUser")
                        .WithMany("DepartmentRoleUsers")
                        .HasForeignKey("RoleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("department_role_user_role_user_id_foreign");

                    b.Navigation("Department");

                    b.Navigation("RoleUser");
                });

            modelBuilder.Entity("Infra.Entities.Device", b =>
                {
                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("devices_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.DeviceTask", b =>
                {
                    b.HasOne("Infra.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("device_task_device_id_foreign");

                    b.HasOne("Infra.Entities.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("device_task_task_id_foreign");

                    b.Navigation("Device");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Infra.Entities.Discount", b =>
                {
                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany("Discounts")
                        .HasForeignKey("ServiceAreaTypeId")
                        .IsRequired()
                        .HasConstraintName("discounts_service_area_type_id_foreign");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.DiscountCode", b =>
                {
                    b.HasOne("Infra.Entities.AreaInfo", "Area")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("discount_codes_area_id_foreign");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Infra.Entities.DiscountCodeServiceAreaType", b =>
                {
                    b.HasOne("Infra.Entities.DiscountCode", "DiscountCode")
                        .WithMany()
                        .HasForeignKey("DiscountCodeId")
                        .IsRequired()
                        .HasConstraintName("discount_code_service_area_type_discount_code_id_foreign");

                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany()
                        .HasForeignKey("ServiceAreaTypeId")
                        .IsRequired()
                        .HasConstraintName("discount_code_service_area_type_service_area_type_id_foreign");

                    b.Navigation("DiscountCode");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.DiscountCodeUser", b =>
                {
                    b.HasOne("Infra.Entities.DiscountCode", "DiscountCode")
                        .WithMany("DiscountCodeUsers")
                        .HasForeignKey("DiscountCodeId")
                        .IsRequired()
                        .HasConstraintName("discount_code_user_discount_code_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("DiscountCodeUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("discount_code_user_user_id_foreign");

                    b.Navigation("DiscountCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.Employee", b =>
                {
                    b.HasOne("Infra.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("Infra.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employees_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.Favorite", b =>
                {
                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("favorites_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.Field", b =>
                {
                    b.HasOne("Infra.Entities.Label", "Label")
                        .WithMany("Fields")
                        .HasForeignKey("LabelId")
                        .IsRequired()
                        .HasConstraintName("fields_label_id_foreign");

                    b.HasOne("Infra.Entities.Segment", "Segment")
                        .WithMany("Fields")
                        .HasForeignKey("SegmentId")
                        .IsRequired()
                        .HasConstraintName("fields_segment_id_foreign");

                    b.Navigation("Label");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Infra.Entities.FileModel", b =>
                {
                    b.HasOne("Infra.Entities.File", "File")
                        .WithMany("FileModels")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("file_models_file_id_foreign");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Infra.Entities.GenderTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Gender", "Gender")
                        .WithMany("GenderTranslations")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("gender_translations_gender_id_foreign");

                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("GenderTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("gender_translations_language_id_foreign");

                    b.Navigation("Gender");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Infra.Entities.Gift", b =>
                {
                    b.HasOne("Infra.Entities.Role", "Role")
                        .WithMany("Gifts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("gifts_role_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("Gifts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("gifts_user_id_foreign");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.GroupUser", b =>
                {
                    b.HasOne("Infra.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_user_group_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_user_user_id_foreign");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.Label", b =>
                {
                    b.HasOne("Infra.Entities.Unit", "Unit")
                        .WithMany("Labels")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("labels_unit_id_foreign");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Infra.Entities.Location", b =>
                {
                    b.HasOne("Infra.Entities.Trace", "Trace")
                        .WithMany("Locations")
                        .HasForeignKey("TraceId")
                        .IsRequired()
                        .HasConstraintName("locations_trace_id_foreign");

                    b.Navigation("Trace");
                });

            modelBuilder.Entity("Infra.Entities.Member", b =>
                {
                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("members_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.MemberPaymentType", b =>
                {
                    b.HasOne("Infra.Entities.Member", "Member")
                        .WithMany("MemberPaymentTypes")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("member_payment_type_member_id_foreign");

                    b.HasOne("Infra.Entities.Task", "Task")
                        .WithMany("MemberPaymentTypes")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("member_payment_type_task_id_foreign");

                    b.Navigation("Member");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Infra.Entities.NoServantRequest", b =>
                {
                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany("NoServantRequests")
                        .HasForeignKey("ServiceAreaTypeId")
                        .IsRequired()
                        .HasConstraintName("no_servant_requests_service_area_type_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("NoServantRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("no_servant_requests_user_id_foreign");

                    b.Navigation("ServiceAreaType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.Offer", b =>
                {
                    b.HasOne("Infra.Entities.AreaInfo", "Area")
                        .WithMany("Offers")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("offers_area_id_foreign");

                    b.HasOne("Infra.Entities.Role", "Role")
                        .WithMany("Offers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("offers_role_id_foreign");

                    b.Navigation("Area");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infra.Entities.OfferServiceAreaType", b =>
                {
                    b.HasOne("Infra.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("offer_service_area_type_offer_id_foreign");

                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany()
                        .HasForeignKey("ServiceAreaTypeId")
                        .IsRequired()
                        .HasConstraintName("offer_service_area_type_service_area_type_id_foreign");

                    b.Navigation("Offer");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.OptionServiceAreaType", b =>
                {
                    b.HasOne("Infra.Entities.Option", "Option")
                        .WithMany("OptionServiceAreaTypes")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("option_service_area_type_option_id_foreign");

                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany("OptionServiceAreaTypes")
                        .HasForeignKey("ServiceAreaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("option_service_area_type_service_area_type_id_foreign");

                    b.Navigation("Option");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.OptionSubscriber", b =>
                {
                    b.HasOne("Infra.Entities.Option", "Option")
                        .WithMany("OptionSubscribers")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("option_subscriber_option_id_foreign");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Infra.Entities.PersonTypeTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("PersonTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("person_type_translations_language_id_foreign");

                    b.HasOne("Infra.Entities.PersonType", "PersonType")
                        .WithMany("PersonTypeTranslations")
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("person_type_translations_person_type_id_foreign");

                    b.Navigation("Language");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("Infra.Entities.Request", b =>
                {
                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceAreaTypeId")
                        .IsRequired()
                        .HasConstraintName("requests_service_area_type_id_foreign");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.RequestOptionService", b =>
                {
                    b.HasOne("Infra.Entities.Option", "Option")
                        .WithMany("RequestOptionServices")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("request_option_service_option_id_foreign");

                    b.HasOne("Infra.Entities.Request", "Request")
                        .WithMany("RequestOptionServices")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("request_option_service_request_id_foreign");

                    b.HasOne("Infra.Entities.Service", "Service")
                        .WithMany("RequestOptionServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("request_option_service_service_id_foreign");

                    b.Navigation("Option");

                    b.Navigation("Request");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infra.Entities.RequestRequirement", b =>
                {
                    b.HasOne("Infra.Entities.Field", "Field")
                        .WithMany("RequestRequirements")
                        .HasForeignKey("FieldId")
                        .IsRequired()
                        .HasConstraintName("request_requirements_field_id_foreign");

                    b.HasOne("Infra.Entities.Request", "Request")
                        .WithMany("RequestRequirements")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("request_requirements_request_id_foreign");

                    b.Navigation("Field");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Infra.Entities.RequestServant", b =>
                {
                    b.HasOne("Infra.Entities.Request", "Request")
                        .WithOne("RequestServant")
                        .HasForeignKey("Infra.Entities.RequestServant", "RequestId")
                        .IsRequired()
                        .HasConstraintName("request_servants_request_id_foreign");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Infra.Entities.Requirement", b =>
                {
                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany("Requirements")
                        .HasForeignKey("ServiceAreaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("requirements_service_area_type_id_foreign");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.RoleUser", b =>
                {
                    b.HasOne("Infra.Entities.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_user_role_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_user_user_id_foreign");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.Score", b =>
                {
                    b.HasOne("Infra.Entities.Task", "Task")
                        .WithMany("Scores")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("scores_task_id_foreign");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Infra.Entities.Segment", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("Segments")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("segments_language_id_foreign");

                    b.HasOne("Infra.Entities.Requirement", "Requirement")
                        .WithMany("Segments")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("segments_requirement_id_foreign");

                    b.Navigation("Language");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Infra.Entities.Servant", b =>
                {
                    b.HasOne("Infra.Entities.Gender", "Gender")
                        .WithMany("Servants")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("servants_gender_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithOne("Servant")
                        .HasForeignKey("Infra.Entities.Servant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("servants_user_id_foreign");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.ServantDailyOnlinePeriod", b =>
                {
                    b.HasOne("Infra.Entities.ServantDailyStatistic", "ServantDailyStatistic")
                        .WithMany()
                        .HasForeignKey("ServantDailyStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServantDailyStatistic");
                });

            modelBuilder.Entity("Infra.Entities.ServantDailyStatistic", b =>
                {
                    b.HasOne("Infra.Entities.ServantWorkDay", "Day")
                        .WithMany("ServantDailyStatistics")
                        .HasForeignKey("DayId")
                        .IsRequired()
                        .HasConstraintName("servant_daily_statistics_day_id_foreign");

                    b.HasOne("Infra.Entities.Servant", "Servant")
                        .WithMany("ServantDailyStatistics")
                        .HasForeignKey("ServantId")
                        .HasPrincipalKey("UserId")
                        .IsRequired()
                        .HasConstraintName("servant_daily_statistics_servant_id_foreign");

                    b.HasOne("Infra.Entities.Service", "Service")
                        .WithMany("ServantDailyStatistics")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("servant_daily_statistics_service_id_foreign");

                    b.Navigation("Day");

                    b.Navigation("Servant");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infra.Entities.ServantScore", b =>
                {
                    b.HasOne("Infra.Entities.Servant", "Servant")
                        .WithMany("ServantScores")
                        .HasForeignKey("ServantId")
                        .HasPrincipalKey("UserId")
                        .IsRequired()
                        .HasConstraintName("servant_scores_servant_id_foreign");

                    b.HasOne("Infra.Entities.Service", "Service")
                        .WithMany("ServantScores")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("servant_scores_service_id_foreign");

                    b.Navigation("Servant");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infra.Entities.ServantStatus", b =>
                {
                    b.HasOne("Infra.Entities.Servant", "Servant")
                        .WithMany("ServantStatuses")
                        .HasForeignKey("ServantId")
                        .HasPrincipalKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("servant_status_servant_id_foreign");

                    b.Navigation("Servant");
                });

            modelBuilder.Entity("Infra.Entities.ServiceAreaType", b =>
                {
                    b.HasOne("Infra.Entities.AreaInfo", "Area")
                        .WithMany("ServiceAreaTypes")
                        .HasForeignKey("AreaId")
                        .HasPrincipalKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("service_area_type_area_id_foreign");

                    b.HasOne("Infra.Entities.Category", "Category")
                        .WithMany("ServiceAreaTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("service_area_type_category_id_foreign");

                    b.HasOne("Infra.Entities.Service", "Service")
                        .WithMany("ServiceAreaTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("service_area_type_service_id_foreign");

                    b.HasOne("Infra.Entities.Type", "Type")
                        .WithMany("ServiceAreaTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("service_area_type_type_id_foreign");

                    b.HasOne("Infra.Entities.Usage", "Usage")
                        .WithMany("ServiceAreaTypes")
                        .HasForeignKey("UsageId")
                        .HasConstraintName("service_area_type_usage_id_foreign");

                    b.Navigation("Area");

                    b.Navigation("Category");

                    b.Navigation("Service");

                    b.Navigation("Type");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("Infra.Entities.ServiceAreaTypeTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("ServiceAreaTypeTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("service_area_type_translations_language_id_foreign");

                    b.HasOne("Infra.Entities.ServiceAreaType", "ServiceAreaType")
                        .WithMany("ServiceAreaTypeTranslations")
                        .HasForeignKey("ServiceAreaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("service_area_type_translations_service_area_type_id_foreign");

                    b.Navigation("Language");

                    b.Navigation("ServiceAreaType");
                });

            modelBuilder.Entity("Infra.Entities.ServiceTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("ServiceTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("service_translations_language_id_foreign");

                    b.HasOne("Infra.Entities.Service", "Service")
                        .WithMany("ServiceTranslations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("service_translations_service_id_foreign");

                    b.Navigation("Language");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infra.Entities.ShippingTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("ShippingTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("shipping_translations_language_id_foreign");

                    b.HasOne("Infra.Entities.Shipping", "Shipping")
                        .WithMany("ShippingTranslations")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("shipping_translations_shipping_id_foreign");

                    b.Navigation("Language");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("Infra.Entities.SpecificTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("SpecificTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("specific_translations_language_id_foreign");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Infra.Entities.SupportNumber", b =>
                {
                    b.HasOne("Infra.Entities.AreaInfo", "Area")
                        .WithMany("SupportNumbers")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("support_numbers_area_id_foreign");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Infra.Entities.Task", b =>
                {
                    b.HasOne("Infra.Entities.Request", "Request")
                        .WithMany("Tasks")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("tasks_request_id_foreign");

                    b.HasOne("Infra.Entities.Servant", "Servant")
                        .WithMany("Tasks")
                        .HasForeignKey("ServantId")
                        .HasPrincipalKey("UserId")
                        .IsRequired()
                        .HasConstraintName("tasks_servant_id_foreign");

                    b.Navigation("Request");

                    b.Navigation("Servant");
                });

            modelBuilder.Entity("Infra.Entities.TaskFactor", b =>
                {
                    b.HasOne("Infra.Entities.Task", "Task")
                        .WithMany("TaskFactors")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("task_factors_task_id_foreign");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Infra.Entities.TaskHourlyStatistic", b =>
                {
                    b.HasOne("Infra.Entities.AreaInfo", "Area")
                        .WithMany("TaskHourlyStatistics")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("task_hourly_statistics_area_id_foreign");

                    b.HasOne("Infra.Entities.ServantWorkDay", "Day")
                        .WithMany("TaskHourlyStatistics")
                        .HasForeignKey("DayId")
                        .IsRequired()
                        .HasConstraintName("task_hourly_statistics_day_id_foreign");

                    b.HasOne("Infra.Entities.Service", "Service")
                        .WithMany("TaskHourlyStatistics")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("task_hourly_statistics_service_id_foreign");

                    b.Navigation("Area");

                    b.Navigation("Day");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Infra.Entities.TelescopeEntriesTag", b =>
                {
                    b.HasOne("Infra.Entities.TelescopeEntry", "EntryUu")
                        .WithMany()
                        .HasForeignKey("EntryUuid")
                        .HasPrincipalKey("Uuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("telescope_entries_tags_entry_uuid_foreign");

                    b.Navigation("EntryUu");
                });

            modelBuilder.Entity("Infra.Entities.UnitTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("UnitTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("unit_translations_language_id_foreign");

                    b.HasOne("Infra.Entities.Unit", "Unit")
                        .WithMany("UnitTranslations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("unit_translations_unit_id_foreign");

                    b.Navigation("Language");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Infra.Entities.UsageTranslation", b =>
                {
                    b.HasOne("Infra.Entities.Language", "Language")
                        .WithMany("UsageTranslations")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("usage_translations_language_id_foreign");

                    b.HasOne("Infra.Entities.Usage", "Usage")
                        .WithMany("UsageTranslations")
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("usage_translations_usage_id_foreign");

                    b.Navigation("Language");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("Infra.Entities.User", b =>
                {
                    b.HasOne("Infra.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("users_gender_id_foreign");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Infra.Entities.UserArea", b =>
                {
                    b.HasOne("Infra.Entities.AreaInfo", "Area")
                        .WithMany("UserAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_areas_area_id_foreign");

                    b.HasOne("Infra.Entities.Role", "Role")
                        .WithMany("UserAreas")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_areas_role_id_foreign");

                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("UserAreas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_areas_user_id_foreign");

                    b.Navigation("Area");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.UserToken", b =>
                {
                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_tokens_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infra.Entities.VehicleDetail", b =>
                {
                    b.HasOne("Infra.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vehicle_details_vehicle_id_foreign");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Infra.Entities.VehicleOwner", b =>
                {
                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("VehicleOwners")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vehicle_owner_user_id_foreign");

                    b.HasOne("Infra.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleOwners")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vehicle_owner_vehicle_id_foreign");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Infra.Entities.VehicleUser", b =>
                {
                    b.HasOne("Infra.Entities.User", "User")
                        .WithMany("VehicleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vehicle_user_user_id_foreign");

                    b.HasOne("Infra.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleUsers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vehicle_user_vehicle_id_foreign");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Infra.Entities.Action", b =>
                {
                    b.Navigation("ActionUsages");
                });

            modelBuilder.Entity("Infra.Entities.AreaInfo", b =>
                {
                    b.Navigation("AreaDepartments");

                    b.Navigation("DailyStatistics");

                    b.Navigation("DiscountCodes");

                    b.Navigation("Offers");

                    b.Navigation("ServiceAreaTypes");

                    b.Navigation("SupportNumbers");

                    b.Navigation("TaskHourlyStatistics");

                    b.Navigation("UserAreas");
                });

            modelBuilder.Entity("Infra.Entities.Attribute", b =>
                {
                    b.Navigation("AttributeServiceAreaTypes");
                });

            modelBuilder.Entity("Infra.Entities.BaseType", b =>
                {
                    b.Navigation("BaseTypeTranslations");
                });

            modelBuilder.Entity("Infra.Entities.CancelReason", b =>
                {
                    b.Navigation("CancelReasonTranslations");

                    b.Navigation("CanceledTasks");
                });

            modelBuilder.Entity("Infra.Entities.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ServiceAreaTypes");
                });

            modelBuilder.Entity("Infra.Entities.Department", b =>
                {
                    b.Navigation("AreaDepartments");

                    b.Navigation("DepartmentRoleUsers");
                });

            modelBuilder.Entity("Infra.Entities.DiscountCode", b =>
                {
                    b.Navigation("DiscountCodeUsers");
                });

            modelBuilder.Entity("Infra.Entities.Field", b =>
                {
                    b.Navigation("RequestRequirements");
                });

            modelBuilder.Entity("Infra.Entities.File", b =>
                {
                    b.Navigation("ClientFiles");

                    b.Navigation("FileModels");
                });

            modelBuilder.Entity("Infra.Entities.Gender", b =>
                {
                    b.Navigation("GenderTranslations");

                    b.Navigation("Servants");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infra.Entities.Group", b =>
                {
                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("Infra.Entities.Label", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Infra.Entities.Language", b =>
                {
                    b.Navigation("BaseTypeTranslations");

                    b.Navigation("CategoryTranslations");

                    b.Navigation("ClientFiles");

                    b.Navigation("DefaultValues");

                    b.Navigation("GenderTranslations");

                    b.Navigation("PersonTypeTranslations");

                    b.Navigation("Segments");

                    b.Navigation("ServiceAreaTypeTranslations");

                    b.Navigation("ServiceTranslations");

                    b.Navigation("ShippingTranslations");

                    b.Navigation("SpecificTranslations");

                    b.Navigation("UnitTranslations");

                    b.Navigation("UsageTranslations");
                });

            modelBuilder.Entity("Infra.Entities.Member", b =>
                {
                    b.Navigation("MemberPaymentTypes");
                });

            modelBuilder.Entity("Infra.Entities.Option", b =>
                {
                    b.Navigation("OptionServiceAreaTypes");

                    b.Navigation("OptionSubscribers");

                    b.Navigation("RequestOptionServices");
                });

            modelBuilder.Entity("Infra.Entities.PersonType", b =>
                {
                    b.Navigation("PersonTypeTranslations");
                });

            modelBuilder.Entity("Infra.Entities.Request", b =>
                {
                    b.Navigation("DeadLines");

                    b.Navigation("RequestOptionServices");

                    b.Navigation("RequestRequirements");

                    b.Navigation("RequestServant")
                        .IsRequired();

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Infra.Entities.Requirement", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("Infra.Entities.Role", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("CanceledTasks");

                    b.Navigation("Gifts");

                    b.Navigation("Offers");

                    b.Navigation("RoleUsers");

                    b.Navigation("UserAreas");
                });

            modelBuilder.Entity("Infra.Entities.RoleUser", b =>
                {
                    b.Navigation("DepartmentRoleUsers");
                });

            modelBuilder.Entity("Infra.Entities.Segment", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Infra.Entities.Servant", b =>
                {
                    b.Navigation("ServantDailyStatistics");

                    b.Navigation("ServantScores");

                    b.Navigation("ServantStatuses");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Infra.Entities.ServantWorkDay", b =>
                {
                    b.Navigation("DailyStatistics");

                    b.Navigation("ServantDailyStatistics");

                    b.Navigation("TaskHourlyStatistics");
                });

            modelBuilder.Entity("Infra.Entities.Service", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("DailyStatistics");

                    b.Navigation("RequestOptionServices");

                    b.Navigation("ServantDailyStatistics");

                    b.Navigation("ServantScores");

                    b.Navigation("ServiceAreaTypes");

                    b.Navigation("ServiceTranslations");

                    b.Navigation("TaskHourlyStatistics");
                });

            modelBuilder.Entity("Infra.Entities.ServiceAreaType", b =>
                {
                    b.Navigation("AttributeServiceAreaTypes");

                    b.Navigation("Commissions");

                    b.Navigation("Discounts");

                    b.Navigation("NoServantRequests");

                    b.Navigation("OptionServiceAreaTypes");

                    b.Navigation("Requests");

                    b.Navigation("Requirements");

                    b.Navigation("ServiceAreaTypeTranslations");
                });

            modelBuilder.Entity("Infra.Entities.Shipping", b =>
                {
                    b.Navigation("ShippingTranslations");
                });

            modelBuilder.Entity("Infra.Entities.Task", b =>
                {
                    b.Navigation("CanceledTasks");

                    b.Navigation("MemberPaymentTypes");

                    b.Navigation("Scores");

                    b.Navigation("TaskFactors");
                });

            modelBuilder.Entity("Infra.Entities.Trace", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Infra.Entities.Type", b =>
                {
                    b.Navigation("ServiceAreaTypes");
                });

            modelBuilder.Entity("Infra.Entities.Unit", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("UnitTranslations");
                });

            modelBuilder.Entity("Infra.Entities.Usage", b =>
                {
                    b.Navigation("ActionUsages");

                    b.Navigation("ServiceAreaTypes");

                    b.Navigation("UsageTranslations");
                });

            modelBuilder.Entity("Infra.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("CanceledTasks");

                    b.Navigation("Devices");

                    b.Navigation("DiscountCodeUsers");

                    b.Navigation("Favorites");

                    b.Navigation("Gifts");

                    b.Navigation("GroupUsers");

                    b.Navigation("Members");

                    b.Navigation("NoServantRequests");

                    b.Navigation("RoleUsers");

                    b.Navigation("Servant")
                        .IsRequired();

                    b.Navigation("UserAreas");

                    b.Navigation("VehicleOwners");

                    b.Navigation("VehicleUsers");
                });

            modelBuilder.Entity("Infra.Entities.Vehicle", b =>
                {
                    b.Navigation("VehicleDetails");

                    b.Navigation("VehicleOwners");

                    b.Navigation("VehicleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
